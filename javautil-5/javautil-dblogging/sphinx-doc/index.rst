.. Springboot Sample Projects documentation master file, created by
   sphinx-quickstart on Tue Jul 10 16:07:36 2018.

Database Instrumentation
========================


Where is your application consuming most of its resources?  What can be done to speed it 
up? Are all components running at as usual, are things degrading?

Instrumentation is a essential part of a robust application.   Fortunately, for projects using java and the Spring Framework it is easy to capture run time performance information from the Oracle database.

This was intended to be an introduction for Oracle DBAs unfamiliar with Spring and
Hibernate.

Introduction
============

.. toctree::
   :maxdepth: 2
   :caption: Contents:

   Overview
   QuickStart
   ExampleInstrumentation
   SpringDeveloperIntroduction
   OracleTracing
   TraceRecords
   OracleDbaIntroduction
   ConnectionPools
   FurtherReading
   TODO

Structure
=========
It's difficult to use words like *service*, *component* without ambiguity as they
are used to mean so many different things.

TODO rephrase all of this

@Transactional Interceptor
--------------------------

begin
*****

* start database tracing
* clean up connection state

end
***
* save trace information
* clean up connection state

Logging
-------
Log activity to a database or to flat files
Log aggregate statistics

Trace Repository Management
---------------------------

Stores trace information into a relational database for querying and compresses the data

Example:

No need to store a million copies of a sql statement.

Look for strings of the exact same size, fast hash, compare.

Fast hash is a lot quicker than an MD5, there may be collisions, but the full compare
will resolve.



Oralit Components
-----------------

Connection Initializer
----------------------

Tracing Client
--------------

Oralit Daemon
-------------

Analytics
---------

Starting with a data model

Reverse engineer into hibernate

Forward Generate into a different database

Unit Tests

Integration Tests Multiple Databases

Data Services

Data models for web

logging

performance logging for hibernate

Builders Maven and Gradle

Generate foreign keys

Extend base classes generated by reveng or change the generation

Generating fake data

Oracle
======
Turning on oracle trace

Tracing accross threads

entityManager.getRerefence(theId);


include all available properties even if commented

What happens if a listener on a pipe disappears?  Will the SGA just fill?

Need to get a unique identifier and A

https://oracle-base.com/articles/misc/dbms_session

Connection Pooling

client_identifier
Before the session is released back into the connection pool, the application should call the CLEAR_IDENTIFIER procedure.

Daemon
------
Listen for changes to dbstats and populate
Retain in file name
aggregate sql statements 
    text
    references
    stats
    provides service names
    where is this statement used

Client
------
    stacktrace 
    finding line of code

Web and Api Client
------------------
Top statements
 

Trace Repository Analysis
-------------------------

Look for literals in statements, ok for warehouses,

Store count, min, max, standard deviation by statement, module, action.

Analysis Dashboard
------------------
TODO explain

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
