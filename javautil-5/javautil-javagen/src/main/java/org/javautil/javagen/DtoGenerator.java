package org.javautil.javagen;

import java.util.Collection;
import java.util.TreeSet;

import org.apache.log4j.Logger;
import org.javautil.dataset.ColumnAttributes;
import org.javautil.jdbc.JdbcJavaNameImpl;
import org.javautil.jdbc.JdbcToJavaImpl;
import org.javautil.jdbc.JdbcToJavaMapper;

public class DtoGenerator {

	static final String classTag = "com.javautil.DaoGen.";

	private final TreeSet<String> neededImports = new TreeSet<String>();

	private final JdbcToJavaMapper mapper = new JdbcToJavaImpl();
	private final JdbcJavaNameImpl namer = new JdbcJavaNameImpl();
	private final ColumnAttributesUtils colUtil = new ColumnAttributesUtils();

	private final Logger logger = Logger.getLogger(getClass());

	/**
	 * Instantiate an instance of JavaGen using a properties file.
	 * 
	 * The following properties are recognized<br>
	 * see DbConnector for current database properties
	 * <p>
	 * 
	 * @param propertyFileName
	 * @exception java.lang.Exception
	 */

	public DtoGenerator() {

	}

	public String getDto(JavaGeneratorArguments args,
			Collection<ColumnAttributes> columns) {
		StringBuffer buff = new StringBuffer(1024 * 16);
		buff.append(getPreamble(args, columns));
		buff.append(getAttributes(columns));
		buff.append(getAccessors(columns));

		buff.append("}\n");
		return buff.toString();
	}

	// public String getDto(JavaGeneratorArguments args, Table table) {
	// StringBuffer buff = new StringBuffer(1024 * 16);
	// buff.append(getPreamble(args, table.getColumns()));
	// buff.append(getAttributes(table.getColumns()));
	// buff.append(getAccessors(table.getColumns()));
	//
	// buff.append("}\n");
	// return buff.toString();
	// }

	public StringBuilder getPreamble(JavaGeneratorArguments args,
			Collection<ColumnAttributes> columns) {
		StringBuilder buff = new StringBuilder();
		buff.append("package " + args.getDtoPackageName() + ";\n\n");
		buff.append("\n");
		buff.append(colUtil.getImports(columns));
		buff.append("/**\n");
		if (args.getTableName() != null) {
			buff.append("  * A representation of the data persisted in a tuple of "
					+ args.getTableName() + ".\n");
		}
		buff.append("  * This code was generated by org.javautil.javagen.JavaGen on "
				+ new java.util.Date() + "\n");
		buff.append("  */\n");
		String className = namer.attributeNameInitCap(args.getDtoClassName());
		buff.append("public class " + className + "{\n");
		return buff;
	}

	public String getAttributes(Collection<ColumnAttributes> columns) {
		StringBuilder sb = new StringBuilder(16 * 1024);
		for (ColumnAttributes column : columns) {
			sb.append(getAttributeComments(column));
			sb.append(getAttribute(column));
		}
		return sb.toString();
	}

	String getAttributeComments(ColumnAttributes mdata) {
		StringBuilder sb = new StringBuilder();
		sb.append("\n\t/** Container for the data persisted in "
				+ mdata.getColumnName() + ". ");
		sb.append(mdata.getColumnTypeName());
		sb.append("      ");
		if (mdata.getComments() != null) {
			sb.append(mdata.getComments());
		}
		sb.append("*/\n");
		String retval = sb.toString();
		logger.debug(retval);
		return retval;
	}

	String getAttribute(ColumnAttributes mdata) {
		StringBuilder sb = new StringBuilder();
		sb.append("\tprivate ");
		sb.append(mapper.getJavaObjectType(mdata));
		sb.append(" ");
		sb.append(namer.getAttributeName(mdata.getColumnName()));
		sb.append(";\n");
		String retval = sb.toString();
		logger.debug(retval);
		return retval;
	}

	String getAccessors(Collection<ColumnAttributes> columns) {
		StringBuilder sb = new StringBuilder();
		sb.append("\t//\n");
		sb.append("\t// Getters and Setters\n");
		sb.append("\t//\n");
		for (ColumnAttributes column : columns) {
			sb.append(getGetterComments(column));
			sb.append(getGetter(column));
			sb.append(getSetterComments(column));
			sb.append(getSetter(column));
		}
		return sb.toString();

	}

	String getGetter(ColumnAttributes mdata) {
		StringBuilder sb = new StringBuilder();
		sb.append("\tpublic ");
		sb.append(mapper.getJavaObjectType(mdata));
		sb.append(" get");
		sb.append(namer.attributeNameInitCap(mdata.getColumnName()));
		sb.append("() {\n");
		sb.append("\t\treturn ");
		sb.append(namer.getAttributeName(mdata.getColumnName()));
		sb.append(";\n");
		sb.append("\t}\n");
		// sb.append(mapper);
		String retval = sb.toString();
		logger.debug(retval);
		return retval;
	}

	String getSetter(ColumnAttributes mdata) {
		StringBuilder sb = new StringBuilder();
		String attributeName = namer.getAttributeName(mdata.getColumnName());
		String attributeNameUpper = namer.attributeNameInitCap(mdata
				.getColumnName());
		sb.append("\tpublic void set");
		sb.append(attributeNameUpper);
		sb.append("(");
		sb.append(mapper.getJavaObjectType(mdata));
		sb.append(" ");
		sb.append(attributeName);
		sb.append(") {\n");
		sb.append("\t\tthis.");
		sb.append(attributeName);
		sb.append(" = ");
		sb.append(attributeName);
		sb.append(";\n");
		sb.append("\t}\n");
		String retval = sb.toString();
		logger.debug(retval);
		return retval;
	}

	String getGetterComments(ColumnAttributes column) {
		return getAccessorComments(column, true);
	}

	String getSetterComments(ColumnAttributes column) {
		return getAccessorComments(column, false);
	}

	String getAccessorComments(ColumnAttributes column, boolean isGetter) {
		if (column == null) {
			throw new IllegalArgumentException("column is null");
		}
		StringBuilder sb = new StringBuilder();
		sb.append("\n\t/** ");
		if (isGetter) {
			sb.append("Getter for ");
		} else {
			sb.append("Setter for ");
		}
		sb.append(namer.getAttributeName(column.getColumnName()));
		sb.append(". */\n");
		String retval = sb.toString();
		logger.debug(retval);
		return retval;

	}

}
